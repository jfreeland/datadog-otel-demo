receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: "otelcol"
          scrape_interval: 600s
          static_configs:
            - targets: ["0.0.0.0:8888"]
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
exporters:
  debug:
    verbosity: detailed
  datadog:
    api:
      key: ${env:DD_API_KEY}
    #host_metadata:
    #  tags:
    #    - cluster:${cluster:=notset}
    traces:
      trace_buffer: 1000
processors:
  infraattributes:
    cardinality: 2
  batch:
    timeout: 10s
    send_batch_max_size: 10000 # default 0, no limit.
    send_batch_size: 8192 # default is 8192
  # https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/memorylimiterprocessor/README.md
  memory_limiter:
    check_interval: 1s
    limit_percentage: 50
    spike_limit_percentage: 30
  resource/k8s:
    attributes:
      - key: service.name
        action: upsert
        from_attribute: opentelemetry.io/name
  k8sattributes:
    extract:
      labels:
        - from: pod
          key: opentelemetry.io/name
          tag_name: opentelemetry.io/name
      metadata:
        - k8s.namespace.name
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - k8s.job.name
        - k8s.node.name
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.pod.start_time
        - container.id
        - k8s.container.name
        - container.image.name
        - container.image.tag
    passthrough: false
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: connection
  transform/datadog:
    metric_statements:
      - context: resource
        statements:
          - set(attributes["datadog.host.name"], "dot")
          - delete_key(attributes, "k8s.job.name")
          - delete_key(attributes, "k8s.cronjob.name")
          - delete_key(attributes, "k8s.daemonset.name")
          - delete_key(attributes, "k8s.deployment.name")
          - delete_key(attributes, "k8s.namespace.name")
          - delete_key(attributes, "k8s.replicaset.name")
          - delete_key(attributes, "k8s.statefulset.name")
          - delete_key(attributes, "k8s.cluster.name")
    trace_statements:
      - context: resource
        statements:
          - set(attributes["datadog.host.name"], "dot")
    log_statements:
      - context: resource
        statements:
          - set(attributes["datadog.host.name"], "dot")
  filter/datadog:
    error_mode: ignore
    traces:
      span:
        - |
          resource.attributes["service.name"] != "opentelemetry-demo-cartservice" and
          resource.attributes["service.name"] != "opentelemetry-demo-productcatalogservice"
connectors:
  datadog/connector:
    traces:
      compute_top_level_by_span_kind: true
      peer_tags_aggregation: true
      compute_stats_by_span_kind: true
service:
  telemetry:
    logs:
      level: info
  pipelines:
    traces:
      receivers:
        - otlp
      processors:
        - infraattributes
        - k8sattributes
        - resource/k8s
        - transform/datadog
        - filter/datadog
        - memory_limiter
        - batch
      exporters:
        - datadog
        - datadog/connector
        - debug
    metrics:
      receivers:
        - otlp
        - datadog/connector
      processors:
        - infraattributes
        - k8sattributes
        - resource/k8s
        - transform/datadog
        - filter/datadog
        - memory_limiter
        - batch
      exporters:
        - datadog
        #- debug
